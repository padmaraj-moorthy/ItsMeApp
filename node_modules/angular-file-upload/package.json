{
  "name": "angular-file-upload",
  "version": "1.6.4",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-uglify": "~0.2.7",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-text-replace": "~0.3.12",
    "grunt-git": "~0.2.14"
  },
  "description": "An AngularJS directive for file upload using HTML5 with FileAPI polyfill for unsupported browsers",
  "main": "dist/angular-file-upload.min.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/danialfarid/angular-file-upload"
  },
  "author": {
    "name": "https://github.com/danialfarid/angular-file-upload/graphs/contributors"
  },
  "bugs": {
    "url": "https://github.com/danialfarid/angular-file-upload/issues"
  },
  "homepage": "https://github.com/danialfarid/angular-file-upload",
  "license": "MIT",
  "readme": "angular-file-upload\n===================\n\n\n**Here is the <a href=\"http://angular-file-upload.appspot.com/\" target=\"_blank\">DEMO</a>**\n\nLightweight Angular JS directive to upload files. Features:\n* File upload for `HTML5` and `non-HTML5` browsers with Flash polyfill [FileAPI](https://github.com/mailru/FileAPI). Allows client side validation before uploading the file\n* Uses regular `$http` to upload (with shim for non-HTML5 browsers) so all angular `$http` features are available\n* Supports upload progress\n* Supports cancel/abort upload while in progress\n* Supports File drag and drop (HTML5 only)\n* Supports Directory drag and drop (webkit only)\n* Supports CORS\n* All `non-HTML5` code is in a separate shim file and could be easily removed if you only supports `HTML5`. (It is needed for `progress` event though)\n* Flash `FileAPI` will be loaded on demand for `non-HTML5` FormData browsers so no extra load for `HTML5` browsers.\n* `$upload` method can be configured to be either `POST` or `PUT` for HTML5 browsers.\n* `$upload.http()` enables progress event for angular http `POST`/`PUT` requests. You can upload file content with the `Content-Type` of the file to CouchDB, imgur, etc... for `HTML5` `FileReader` browsers. See [#88(comment)](https://github.com/danialfarid/angular-file-upload/issues/88#issuecomment-31366487) for discussion and usage.\n\n## Usage\n\nHTML:\n```html\n<!-- shim is needed to support upload progress/abort for HTML5 and non-HTML5 FormData browsers.-->\n<!-- use html5-shim.js instead if you just support HTML5 browsers and you need progress event-->\n<!-- Note: shim.js MUST BE PLACED BEFORE angular.js and angular-file-upload.js AFTER angular.js-->\n<script src=\"angular-file-upload-shim.min.js\"></script> \n<script src=\"angular.min.js\"></script>\n<script src=\"angular-file-upload.min.js\"></script> \n\n<div ng-controller=\"MyCtrl\">\n  <input type=\"text\" ng-model=\"myModelObj\">\n  <input type=\"file\" ng-file-select=\"onFileSelect($files)\">\n  <input type=\"file\" ng-file-select=\"onFileSelect($files)\" multiple accept=\"image/*\">\n  <div class=\"button\" ng-file-select=\"onFileSelect($files)\" data-multiple=\"true\"></div>\n  <div ng-file-drop=\"onFileSelect($files)\" ng-file-drag-over-class=\"optional-css-class-name-or-function\"\n        ng-show=\"dropSupported\">drop files here</div>\n  <div ng-file-drop-available=\"dropSupported=true\" \n        ng-show=\"!dropSupported\">HTML5 Drop File is not supported!</div>\n  <button ng-click=\"upload.abort()\">Cancel Upload</button>\n</div>\n```\n\nJS:\n```js\n//inject angular file upload directives and service.\nangular.module('myApp', ['angularFileUpload']);\n\nvar MyCtrl = [ '$scope', '$upload', function($scope, $upload) {\n  $scope.onFileSelect = function($files) {\n    //$files: an array of files selected, each file has name, size, and type.\n    for (var i = 0; i < $files.length; i++) {\n      var file = $files[i];\n      $scope.upload = $upload.upload({\n        url: 'server/upload/url', //upload.php script, node.js route, or servlet url\n        //method: 'POST' or 'PUT',\n        //headers: {'header-key': 'header-value'},\n        //withCredentials: true,\n        data: {myObj: $scope.myModelObj},\n        file: file, // or list of files ($files) for html5 only\n        //fileName: 'doc.jpg' or ['1.jpg', '2.jpg', ...] // to modify the name of the file(s)\n        // customize file formData name ('Content-Desposition'), server side file variable name. \n        //fileFormDataName: myFile, //or a list of names for multiple files (html5). Default is 'file' \n        // customize how data is added to formData. See #40#issuecomment-28612000 for sample code\n        //formDataAppender: function(formData, key, val){}\n      }).progress(function(evt) {\n        console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));\n      }).success(function(data, status, headers, config) {\n        // file is uploaded successfully\n        console.log(data);\n      });\n      //.error(...)\n      //.then(success, error, progress); \n      // access or attach event listeners to the underlying XMLHttpRequest.\n      //.xhr(function(xhr){xhr.upload.addEventListener(...)})\n    }\n    /* alternative way of uploading, send the file binary with the file's content-type.\n       Could be used to upload files to CouchDB, imgur, etc... html5 FileReader is needed. \n       It could also be used to monitor the progress of a normal http post/put request with large data*/\n    // $scope.upload = $upload.http({...})  see 88#issuecomment-31366487 for sample code.\n  };\n}];\n```\n\n**Order of scripts**: `angular-file-upload-shim.js` must be loaded before `angular.js` and is only needed if you are supporting non-HTML5 FormData browsers or you need to support upload progress or cancel.\n\n**Upload multiple files**: Only for HTML5 FormData browsers (not IE8-9) if you pass an array of files to `file` option it will upload all of them together in one request. In this case the `fileFormDataName` could be an array of names or a single string. For Rails or depending on your server append square brackets to the end (i.e. `file[]`).\nIf you want a cross browser approach you need to iterate through files and upload them one by one like the code above. This is due to the limitation of Flash file upload.\n\n**$upload.http()**: You can also use `$upload.http()` to send the file binary or any data to the server while being able to listen to progress event. See [#88](https://github.com/danialfarid/angular-file-upload/issues/88) for more details.\nThis equivalent to angular $http() but allow you to listen to progress event for HTML5 browsers.\n\n**Rails progress event**: If your server is Rails and Apache you may need to modify server configurations for the server to support upload progress. See [#207](https://github.com/danialfarid/angular-file-upload/issues/207)\n\n**drag and drop styling**: For file drag and drop, `ng-file-drag-over-class` can be a function that returns a class name based on the $event. See the demo for a sample. If the attribute is not specified by default the element will have \"dragover\" class on drag over which could be used to style the drop zone.\nYou can also specify `ng-file-drag-over-delay` to fix css3 transition issues from dragging over/out/over [#277](https://github.com/danialfarid/angular-file-upload/issues/277).\n\n## Old browsers\n\nFor browsers not supporting HTML5 FormData (IE8, IE9, ...) [FileAPI](https://github.com/mailru/FileAPI) module is used. \nFor these browsers these two files are needed:  **`FileAPI.min.js`, `FileAPI.flash.swf`** which will be loaded if the browser does not supports HTML5 FormData (no extra load for HTML5 browsers).\n\n**Note**: Flash needs to be installed on the client browser since `FileAPI` uses Flash to upload files.\n\nYou can put these two files beside `angular-file-upload-shim(.min).js` on your server to be loaded automatically on demand or use the following script to set the FileAPI load path for example if you are using CDN (optional):\n```html\n<script>\n    //optional need to be loaded before angular-file-upload-shim(.min).js\n    FileAPI = {\n        //only one of jsPath or jsUrl.\n        jsPath: '/js/FileAPI.min.js/folder/', \n        jsUrl: 'yourcdn.com/js/FileAPI.min.js',\n        \n        //only one of staticPath or flashUrl.\n        staticPath: '/flash/FileAPI.flash.swf/folder/',\n        flashUrl: 'yourcdn.com/js/FileAPI.flash.swf',\n\n        //forceLoad: true, html5: false //to debug flash in HTML5 browsers\n    }\n</script>\n<script src=\"angular-file-upload-shim.min.js\"></script>...\n```\n**Old browsers known issues**: \n* Because of a Flash limitation/bug the server needs to send a response body in order for the success and error callbacks to work properly. See [163#issuecomment](https://github.com/danialfarid/angular-file-upload/issues/163#issuecomment-39839508)\n* Custom headers will not work due to a Flash limitation [#111](https://github.com/danialfarid/angular-file-upload/issues/111) [#224](https://github.com/danialfarid/angular-file-upload/issues/224) [#129](https://github.com/danialfarid/angular-file-upload/issues/129)\n* Due to Flash bug [#92](https://github.com/danialfarid/angular-file-upload/issues/92) Server HTTP error code 400 will be returned as 200 to the client. So avoid returning 400 on your server side for upload response otherwise it will be treated as a success response on the client side.\n\n##Server side samples\n* **Amazon S3 Upload**: [nukulb](https://github.com/nukulb) has provided an example here https://github.com/hubba/s3-angular-file-upload\n* **Node.js**: Sample wiki page provided by [chovy](https://github.com/chovy)\n\n## Install\n\nDownload latest release from [here](https://github.com/danialfarid/angular-file-upload-bower/releases) or \n```sh\n#notice 'ng' at the beginning of the module name not 'angular'\nbower install ng-file-upload \n```\nMake sure to load the scripts in your html file exactly in this order as described in the Usage: \n```html\n<script src=\"angular-file-upload-shim(.min).js\"></script> \n<script src=\"angular(.min).js\"></script>\n<script src=\"angular-file-upload(.min).js\"></script> \n```\n\nOr for yeoman with bower automatic include:\n```\nbower install ng-file-upload -save\nbower install ng-file-upload-shim -save\n```\nbower.json\n```\n{\n  \"dependencies\": [..., \"ng-file-upload-shim\", \"angularjs\", \"ng-file-upload\", ...],\n}\n```\n\n\nYou can find the sample server code in Java/GAE [here](https://github.com/danialfarid/angular-file-upload/blob/master/demo/src/com/df/angularfileupload/FileUpload.java).\n\nIf you use this module you can give it a thumbs up at [http://ngmodules.org/modules/angular-file-upload](http://ngmodules.org/modules/angular-file-upload).\n\nLet [me](https://github.com/danialfarid) know if you have any questions. Bug report, feature request: [issue](https://github.com/danialfarid/angular-file-upload/issues).  \n  If you like the plugin get me a <a target=\"_blank\" href=\"http://angular-file-upload.appspot.com/donate.html\">cup of tea <img src=\"http://angular-file-upload.appspot.com/img/tea.png\" width=\"40\" height=\"24\" title=\"Icon made by Freepik.com\"></a> so I add features and fixes faster.\n\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "angular-file-upload@1.6.4",
  "_from": "angular-file-upload@"
}
